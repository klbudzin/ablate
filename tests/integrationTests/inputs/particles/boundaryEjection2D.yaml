# Simple test for pushing source terms to the cell mesh.  Notice that the time step lag results in a final result that is off by a dt
---
test:
  # a unique test name for this integration tests
  name: BoundaryParticles2D
  # create a default assert that compares the log file
  assert: "inputs/particles/boundaryEjection2D.txt"

# metadata for the simulation
environment:
  title: _RandomParticleEjection
  tagDirectory: false
arguments:
  # ask petsc to label the boundary values
  dm_plex_separate_marker: ""

# set up the time stepper responsible for marching in time
timestepper:
  name: theMainTimeStepper
  arguments:
    ts_type: rk
    ts_max_time: 5
    ts_max_steps: 10
    ts_dt: 1.0E-5
    ts_adapt_safety: 0.9
    ts_adapt_type: physicsConstrained
  # io controls how often the results are saved to a file for visualization and restart
  io: !ablate::io::Hdf5MultiFileSerializer
    interval: 10 # results are saved at every 0 steps.  In real simulations this should be much larger.

  # Create a simple box mesh to start
  domain: !ablate::domain::BoxMesh
    name: simpleBoxField
    faces: [ 40, 5 ]
    lower: [ 0.0, 0.0 ]
    upper: [ .2, .05 ]
    simplex: false
    # pass in these options to petsc when setting up the domain.  Using an option list here prevents command line arguments from being seen.
    options:
      dm_distribute: true # turn off default dm_distribute so that we can extrude label first
      dm_refine: 2
      #dm_distribute_overlap: 0
    modifiers:
      # extrude all boundaries
      - !ablate::domain::modifiers::ExtrudeLabel
        # use the labels defined by the dm_plex_separate_marker option
        regions:
          - name: marker
            value: 1 # this is the bottom boundary value
          - name: marker
            value: 2 # this is the right boundary value
          - name: marker
            value: 3 # this is the top boundary value
          - name: marker
            value: 4 # this is the left boundary value
        # define a region for the new interface between the originalRegion and extrudedRegion
        boundaryRegion:
          name: boundaryFaces
        # for all cells/faces/points that were in the original mesh before extrusion
        originalRegion:
          name: interiorCells
        # for all cells/faces/points that were extruded.  This does include overlap faces that are in the boundaryRegion, originalRegion, and extrudedRegion regions
        extrudedRegion:
          name: boundaryCells

      # if using mpi, this modifier distributes cells
      - !ablate::domain::modifiers::DistributeWithGhostCells
        ghostCellDepth: 2

    fields:
      # all fields must be defined before solvers.  The ablate::finiteVolume::CompressibleFlowFields is a helper
      # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
      - !ablate::finiteVolume::CompressibleFlowFields
        eos: !ablate::eos::PerfectGas &eos
          parameters:
            gamma: 1.4
            Rgas: 287.0
      # species are added to the flow through the eos.  This allows testing of the species transport equations
      # by adding a pressure field the code will compute and output pressure
      - name: pressure
        location: AUX
        type: FVM
      - name: tmp
        location: sol
        type: FVM
  # set the initial conditions of the flow field
  initialization:
    # The ablate::finiteVolume::CompressibleFlowFields is a helper
    # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
    - !ablate::finiteVolume::fieldFunctions::Euler
      state:
        &flowFieldState
        eos: *eos
        pressure: 101325.0
        temperature: 300
        velocity: " 0,0"
    #        velocity: ".125*y/.05/.05, (.1+.2*(.05-y)/.05)/2"

    # set the tmp field to zero
    - fieldName: "tmp"
      field: 0.0
solvers:
  # The compressible flow solver will solve the compressible flow equations over the interiorCells
  - !ablate::finiteVolume::CompressibleFlowSolver
    id: FlowField
    # only apply this solver to the flowRegion, area without faces
    region:
      name: interiorCells
    additionalProcesses:
      - !ablate::finiteVolume::processes::PressureGradientScaling
        &pgs
        eos: *eos
        alphaInit: 100.0
        maxAlphaAllowed: 100.0
        domainLength: 0.165354
        log: !ablate::monitors::logs::CsvLog
          name: pgsLog

      #a flux calculator must be specified to so solver for advection
    fluxCalculator: !ablate::finiteVolume::fluxCalculator::AusmpUp
      pgs: *pgs
    # cfl is used to compute the physics time step
    parameters:
      cfl: 0.5
    # the default transport object assumes constant values for k, mu, diff
    transport:
      k: .2
      mu: .1
      diff: 1E-4

    # share the existing eos with the compressible flow solver
    eos: *eos

    monitors:
      # output the timestep and dt at each time step
      - !ablate::monitors::TimeStepMonitor
        interval: 1

  #Create the particel SOlver
  - !ablate::particles::CoupledParticleSolver &particles
    #  - !ablate::particles::ParticleSolver
    id: flowParticles
    region:
      name: interiorCells
    initializer: !ablate::particles::initializers::BoxInitializer
      lower: [0, 0]
      upper: [.1, .01]
      particlesPerDim: 0

    # all fields except the coordinates must be specified
    fields:
      - name: ParticleVelocity
        location: SOL # Solution means that it is part of the time stepping in the particle solver
        components: [ u, v ]
      - name: ParticleDiameter
        location: AUX
      - name: ParticleDensity
        location: AUX

    processes:
      #      - !ablate::particles::processes::Inertial
      #                parameters:
      #                  fluidDensity: 1
      #                  fluidViscosity: 1e-4
      #                  gravityField: "0.0, 0"
      - !ablate::particles::processes::Tracer

      # Initialize the specified particle fields
    fieldInitialization:
      - fieldName: ParticleDiameter
        field: 0.005
      - fieldName: ParticleDensity
        field: 90.0
      - fieldName: ParticleVelocity
        field: "0.0, .1"
    monitors:
      - !ablate::monitors::ParticleCount
      - !ablate::monitors::ParticleAverage

      #Define the Ejector Boundaries
  - !ablate::boundarySolver::BoundarySolver
    id: BottomEjector
    region:
      name: marker
      value: 1
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::particles::ArbitraryParticleEjector
        particleSolver: *particles
        function: "pRand(0,1)"
        limitingValue: .9995
  #
  - !ablate::boundarySolver::BoundarySolver
    id: LeftEjector
    region:
      name: marker
      value: 4
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::particles::ArbitraryParticleEjector
        particleSolver: *particles
        function: "pRand(0,1)"
        limitingValue: .995


  - !ablate::boundarySolver::BoundarySolver
    id: inlet_Left
    region:
      name: marker
      value: 4 #Left
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: false
    processes:
      - !ablate::boundarySolver::lodi::Inlet
        eos: *eos
        pgs: *pgs
        velocity: "2, 0.5" # for stability, increase the velocity slowly


  # use a boundary solver to update the cells in the boundaryCellsRight region to represent an open pipe
  - !ablate::boundarySolver::BoundarySolver
    id: openBoundary_Right
    region:
      name: marker
      value: 2 #right
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::OpenBoundary
        eos: *eos
        reflectFactor: 0
        referencePressure: 101325.0
        maxAcousticsLength: .2
        pgs: *pgs


  # use a boundary solver to update the cells in the boundaryCellsTop region to represent standard wall
  - !ablate::boundarySolver::BoundarySolver
    id: openBoundary_Top
    region:
      name: marker
      value: 3
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::OpenBoundary
        eos: *eos
        reflectFactor: 0
        referencePressure: 101325.0
        maxAcousticsLength: .05
        pgs: *pgs

  # use a boundary solver to update the cells in the boundaryCellsBottom region to represent standard wall with a Sublimation BC
  - !ablate::boundarySolver::BoundarySolver
    id: inlet_Bottom
    region:
      name: marker
      value: 1 #bottom
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::lodi::Inlet
        eos: *eos
        pgs: *pgs
        velocity: "2, .5" # for stability, increase the velocity slowly

